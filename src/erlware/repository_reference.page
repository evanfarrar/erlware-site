---
title: Repository Reference
directoryName: Erlware
inMenu: true
orderInfo: 5
---

# Repository Layout

The repository layout is straight forward. A developer familiar with debian and
the rubygems projects should recognize a similar structure here. We believe that
we have taken into account all of the important dimensions of source and binary
projects. We have also worked to design in a metadata facility to the
repository. To that end the repository looks as follows

    <repo>/<erts-vsn>/<arch>/<lib|releases><package-name>/<package-vsn>/<package-name>.tar.gz

  * **`<repo>:`** - This may be anything. We provide stable and unstable
      repositories, but a third part could have anything they liked.

  * **`<erts-vsn>:`** This in the version of the Erlang runtime system the
      subsequent packages are build and/or designed for. This is not the Erlang
      release number; ie. for the current release it would be 5.5.3 not RllB-3.

  * **`<arch>:`** This may be Generic, Source or <arch> where arch is the value
      returned by systeminfo(systemarchitecture). Generic is where the
      non-architecture dependent Erlang binaries end up. is where the
      architecture dependent binaries end up; basically those packages that have
      a native component. Sources is where uncompiled sources end up. Meta is
      also found at this level, but we will treat it separately because it has a
      different substructure.

  * **`<package-name>:`** The name of the OTP app or release that this directory
      represents.

  * **`<package-vsn>:`** An available version of the app or release. Many
      different versions may appear under a package name.

  * **`<package-name>.tar.gz:`** This is the tared package, the unit of
      distribution. In binary application packages it will contain a directory
      called `<app-name>-<app-version>` under is the ebin, src, etc that make up
      the OTP application. In a source application package it will be a
      directory named after the application but lacking the version. Release
      packages will contain a directory called
      `<release-name>-<release-version>.` Underneath a release will contain
      `releases/<release-version>/` and a bin directory at a minimum.

# Repository Metadata

The repository metadata is under the same top level but layered slightly
differently.

    <repo>/<erts-vsn>/Meta/<package-name>/<package-vsn>/<tag files>

In this case, under the Meta directory is the name of the OTP application
contained within. Finally there is the metadata named by `<package-vsn>.` The
`<package-vsn>` should represent the version of the package this metadata
applies to.  The metadata itself is a `*.app` file.  The `.app` file provides
enough information for dependency management while remaining easily accessible.

Tag file(s) are simple files that give additional metadata about the
package. One file that is almost always present is the license file. Another is
the 'native' file that indicates that this package contains native code. There
is also the 'deprecated' file that indicates that a package has been deprecated.

# ERTS in The Repository

    <repo>/<erts-vsn>/erts/<arch>/erts.tar.gz

Under the erts directory is a tarball containing the latest erts version
compiled for the architecture specified by arch. The version-list file is a list
of versions of erts available. This file is in the same format as the one used
in the application metadata area.

# Getting Things Into The Repository

Faxien is the Erlware utility that will allow you to interact with an Erlware
software repository. faxien fetchs packages from the remote repository and
installs them on your local machine. Conversely faxien also publishes packages
located on your local hard disk into a remote repository. For more information
see the [Faxien docs.]({relocatable: /tools/faxien})

# Specifying Additional Application Dependency Information

One thing that normal OTP application `*.app` lacks is the ability to specify
versioned dependencies at the OTP Application level. Usually, this happens at
the `*.rel` level. However, its hard to know what your dependencies are without
going through a large amount of manual effort looking at `*.rel` files for
various projects. It also makes it hard for a repository based on OTP
applications as the unit of distribution, like ours. To that end we have added a
small bit of addition information `*.app` files that constitute our
metadata. That information is a versioneddependencies and an ertsvsn tuple. The
OTP release handling structure ignores this information, but it is used by our
dependency resolution infrastructure. An example of `*.app` file with this
additional information follows.

    {application, someapp,
     [{description, "Versioned Dependencies example"},
      {vsn, "0.1.0"},
      {erts_vsn, "5.5.3"},
      {modules, [sa_app,
                 sa_sup,
                 sa_worker,
                 sa_worker_sup]},
      {registered, [tercio]},
      {applications, [kernel, stdlib, sasl]},
      {versioned_dependencies, [{kernel, "2.11.2"},
                                {stdlib, "1.14"},
                                {sasl, "2.1.4", gte}]},
      {mod, {sa_app, []}}]}.

Neither of these entries are required. If they are left out the dependency
resolution scheme will happily use whatever is the latest available in the
repository. However, if an app has a hard version requirement it is a good idea
to specify these dependencies. In our experience this is usually not necessary.

**Special notes:** You may specialize the dependecy information by using a part
of the version number or by adding gte no the tuple. Using part of a version
number indicates that anything within that range is acceptable. For example, if
you specify stdlib 1.14 then either stdlib 1.14.34 and 1.14.99 but not 1.15.0
are acceptable. 'gte' works a bit similarly. If you wish to say that any version
greater then or equal to sasl 2.1.4 is acceptable just add gte no the tuple.

# Hosting Your Own Repository

We have tried to keep hosting your own repository very, very simple. To that end
we settled on requiring a simple HTTP server for repository access. Because we
support putting packages into the repository and pulling information about the
repository down we also require that HTTP server to be dav enabled. The downside
to this is that not every HTTP server supports dav and those that do tend to be
a bit more complex then those that don't. Even with that being the case we
believe that requiring a dav enable HTTP server is a simpler option then
providing a custom repository application that repository hosters would need to
install and run. This also reduces the maintenance burden on those of us that
help out with erlware.

Two servers that we use that support dav: [Apache][apache] with the [mod_dav][]
module and [lighttpd.][lighttpd] We tend to use lighttpd because its lightweight
and performant. However, an dav enable server will do.

[apache]: http://apache.org "Apache site"
[mod_dav]: http://httpd.apache.org/docs/2.0/mod/mod_dav.html "Mod dav"
[lighttpd]: http://www.lighttpd.net/ "Lighttpd site"