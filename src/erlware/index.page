---
title: Introduction
directoryName: Erlware
inMenu: true
orderInfo: 1
---

# Erlware is now BETA!!  Test and submit bugs

Free and open source Erlware is software that makes writing Erlang/OTP
applications easy. At the core of Erlware are our build system and our package
management tool; Sinan (our flagship buildsystem) and Faxien our package
management tool. Sinan, and Faxien support and encourage OTP application and
release structure. All systems embody the [Erlang/OTP design
principles](http://www.erlang.org/doc/design_principles/part_frame.html).

# Ultra Quick Start

You may have a very basic idea of how Faxien works by running two simple steps:

## Step 1: Get Faxien

![Faxien Icon]({relocatable:/images/icon-faxien-small.jpg})
[Download](http://code.google.com/p/faxien/downloads/list) the platform specific
Faxien boostrapper and run it


    $ sudo sh ./faxien-bootstrap-<platform>.sh


## Step 2: Install Sinan

![Sinan Icon]({relocatable:/images/icon-sinan-small.jpg}) Now you are read to
install Erlware packages. To install Sinan, the project build system, type


    $ sudo /usr/local/erlware/bin/faxien install sinan.

Now you have last Sinan version ready to run. For more advanced use of Erlware,
check out the [complete tutorial.]({relocatable: /erlware/tutorial.page})


# Intent

Helping to create a system of leadership for the Erlang open source community.

The open source community looks to Ericsson to provide it with direction.  As
much as we love them Ericsson is a business not an open source initiative. The
open source community needs to provide its own leadership. Fortunately, we can
control our own destinies. We can drive development without a branching of the
Erlang community or code base. To accomplish this end we must set a few goals
for ourselves.

  * Allow Erlang to move forward on its own
  * Allow community driven evolution of the language/platform
  * Make the language/platform accessible to reasonably competent programmers

Our first task will be to create a level playing field for both those
applications distributed with Erlang and those created and supported by the
community. Right now we have those applications distributed with Erlang and open
source applications spread all over the place. Some of these open source apps
are in the "user contrib" section of erlang.org, others are at "Process One",
still others are in the contrib section of trapexit and even more are in jungerl
or on private blogs. Worse yet some projects have multiple version in multiple
places. This is detrimental to the Erlang community. We have created a canonical
store for Erlang applications. Our first stab at resolving this issue is our
repository (see below).

We believe it would be of great value to the Erlang community if someone were
able to develop a standard way to package Erlang applications and releases for
distribution. Tools can then be created to easily pull packages from the
repository. This will allow apps like erlrt, the Erlang maven project, build
tools, etc.  Making a striped down version 'core' of Erlang available and
loading those libraries that are usually distributed with Erlang as well as open
source packages into the repository and making them available as needed gives us
a flexible and level playing field in which to work.

We also seek to provide some method for the community to drive the development
of Erlang and its libraries. There isn't much we can do about the core of the
language, we don't want to branch Erlang. However, we can provide alternate
cleaned up and standardized versions of the standard apps distributed with
Erlang. Considering our new level playing field this would allow us to fix a lot
of the inconsistencies in the standard libraries as part of this
process. Fortunately, this is a common problem for languages and we have many
examples of processes that other languages have used to solve the
problem. Python has the PEP process, Scheme has the SRFIs, the networking world
has the RFC, etc. In fact Per Gustaffsson has already started this process with
[EEPs](http://www.erlang.org/pipermail/erlang-questions/2007-January/024999.html)

It is our hope and the hope of the other developers who have worked on this
website that we can tackle the problems of having multiple versions of Erlang
spread across different websites, establish availability of standardized tools,
and in general level the playing field between the Erlang open source community
and Ericsson Erlang.

# Why a Centralized Repository?

It's not really a centralized repository. Erlware is the community repository,
it is a well known place to get OTP applications provided by the Erlang
community. In fact, we expect individual developers and enterprises alike to
provide a local repository for their own purposes. We document the repository
layout so people can do just that. With
[Sinan.]({relocatable:/tools/sinan} "Sinan") our build system, you can specify
as many repositories as you like and it will search them in the order you
specify. So there although Erlware is and should be a well known widely
available repository it shouldn't be seen as a centralized solution.

# Why Not Existing Repositories?

The repository you are probably thinking of is [CEAN][cean] which is owned by
Process One and maintained by Mickaël Rémond and Christophe Romain. CEAN is
actually a pretty interesting system with quit a large number of packages
available. Unfortunately, it doesn't actually fit our needs for three main
reasons.

  * Its backend format isn't publicly specified, so third parties cannot host
    repositories of their own.
  * It doesn't ensure/require that applications that are part of CEAN follow OTP
    standards.
  * It doesn't expose dependency information for its packages (basically it has
    no exposed metadata, probably due to point #2).
  * It does not store executable releases i.e standalone Erlang services.

Point #1 is one of the biggest problems for us. Based on our development
experience we know that it is very important for an entity to be able to host
their own repositories. This is especially true of companies that build
proprietary software. They need to be able to host their internal code on their
own repositories with no chance of that code leaking out of their firewalls. Its
also important for individuals working on open source projects who's code may
not be ready for distribution into a widely available repository. Perhaps they
have a small private developer group that needs access to the code. In any case,
We think that the best way to allow these use cases is to document the
repository format well and let people host their own. CEAN plans to provide
documentation for their backend at some point in the future. When that happens
this issue may no longer be an issue.

Point #2 A very important feature of our build system is the ability to just 'do
the right thing' with minimal user input during the build process. Like one of
the popular web development frameworks out today we favor convention over
configuration. We rely on a well defined structure to the project as well as the
use of metadata. OTP provides that structure and metadata for us. Therefore we
require that the applications we work with follow OTP standards. We also hope
that this encourages the spread of OTP and OTP knowledge through out the Erlang
community - one of Erlware's main goals. CEAN also requires an OTP layout though
not `*.app` files. It doesn't expose this data in a programmatically useful way
however.

Point #3 One of the big features of our build system is the ability to manage
dependencies. This is a very nice feature that we need to support and we can't
do that without easily accessible metadata on remotely available dependencies.

This is in no way meant as a criticism of CEAN. CEAN and our repository where
created with very different goals in mind. CEAN was created as a CPAN like
structure for Erlang where as our repository follows something more akin to
Maven's repository model. Each has evolved to fill its own niche.

# Goals and Requirements of the Repository Project

## Requirements of the Repository

  * The OTP application is the central unit of distribution
  * Multiple versions of the repository may exist for various levels of
    stability i.e stable and unstable.
  * The version and metadata of each OTP Application must be exposed and
    available
  * The repository must have an open, accessible and predictable structure so
    that it is programatically accessible

## Admission into Erlware

If you want to submit your application or release (from now on applications and
releases will be generically referred to as "packages") to Erlware for inclusion
in the main repository; Congratulations! This is what Erlware is all about. When
a package is submitted to Erlware it must meet certain standards in order to be
included. That applications conform to these standards is ensured through our
verification process. Unlike with a package that is stored in a local repository
a package submitted to Erlware does not go straight into the repo, instead it is
placed in a special staging area. From there community members work to ensure
the application meets the minimum requirements.  Requirements for the Apps That
Constitute the Erlware 'Stable' Repository

  * Erlware ensures that packages within the repository are well structured;
    that they follow OTP standards
  * Erlware will accept only source applications and leverage our own hardware
    and that of the communities to build binary applications for different
    distributions/targets through a build farm. Volunteers always welcome!
  * Erlware will only accept applications with, at minimum, well documented
    API's. Edoc is our preferred format.

  * An application must not generate excessive warnings when compiled.

# Erlware Licenses

Most projects under the Erlware umbrella use the mit license. An example is
available below.

## MIT License

The MIT License

Copyright (c) <year> <copyright holders>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

## Founders

Martin Logan & Eric Merritt

## Project Owners

Dave Peticolas - Erlware Mode

Eric Merritt - Sinan

Martin Logan - Faxien

## Site Layout & Graphic Design

Jeremy Hlinak (main designer) http://www.cdform.com/

Eric Merritt

Martin Logan

## Contributors

Last but not least many thanks to all the others that have helped us by finding
bugs, submitting patches, and otherwise supporting Erlware.

[cean]: http://cean.process-one.net/ "Cean at Process One"
