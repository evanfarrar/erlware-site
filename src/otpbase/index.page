---
title: index
directoryName: OTP Base
---

![OTP Base Icon](/images/icon-otp-base3-with-text.jpg)


# Overview


"It is preferable to build an expensive residence on a foundation of
sand than it is to undertake the construction multiple software
applications without a common build structure and environment."

The OTP Base is a "make" based build environment that supports the OTP
way of building applications with the Erlang programming language.
For more information on how to do this you may want to look at this
[tutorial](http://wiki.trapexit.org/index.php/Building_An_OTP_Application).

The reason to use OTP Base is that it supports creating Erlang
applications in the Unix/Linux world very well.  It is built upon make
and /bin/sh.  OTP Base makes building OTP applications in this
environment very simple; with otp base you no longer have to wade
through docs trying to figure out what a .script file is for.

OTP Base provides the following core tree structure which corresponds
to the Erlang OTP
[Design Principles](http://www.erlang.org/doc/doc-5.5.5/doc/design_principles/part_frame.html)

![OTP Basic Structure](/images/otp-basic-structure.jpg)

The release directory specific to an application contains further
directories for configuration and logging.  These are discussed in
more detail further on.

# More Information

  * [Getting Started]({relocatable: getting-started.page})


# What's in a Name?

OTP Base is named so because it is a standard build system for all OTP
projects.  A standard build system is the underpinning, the
foundation, for which any good project is based upon.  Its that
simple, it is your base, your foundation for good solid OTP
applicaitons.

# Building the Tree

To build, type make, it should all work from there. Additionally the
system supports the following targets:

## Build Specific:

  - **all**: Same as just typing make, builds all
  - **clean**: Cleans out all build artifacts and generated documentation.

## App Specific:

  - **docs**: Builds documentation for all exported functions using edoc. Docs placed in <appname>/docs.

## Release Specific:

   - **install**: Creates a production ready release package. By default this packages and places a versioned release in /usr/local/lib
   - **tar**: Generates an installable tared archive of a production release package.


Any release or application can be excluded from the make process if it
contains a file named "SKIP".

**NOTE** if your system has Erlang installed in a directory other than
  /usr/local/lib/erlang then you must set the environment variable
  ERL_RUN_TOP to that directory. For exampleif you have Erlang
  installed in /home/jdoe/erlang then you should export
  ERL_RUN_TOP=/home/jdoe/erlang

# Application and Release Details A _lib/&lt;appname&gt;/_ directory may have
any of the following directories where needed.


  - **src/**: contains erlang sources (.erl files)
  - **ebin/**: compiled beam files are placed here
  - **include/**: contains shared .hrl files
  - **c_src/**: contains C sources
  - **priv/**: contains files you want at run-time
  - **doc/**: generated documentation from "make docs" is placed here


Before a build a release directory will contain the following files

  - **vsn.mk**: Contains the version number for the release.
  - **<appname>_rel.rel.src**: Contains the applications that will be present when the release is started. Unless otherwise specified when a build is complete the latest version of each application will be included and also started. See the docs for fs_boot_smithe under FSLib for more details.
  - **<appname>_rel.config.src**: Configuration for the release. This gets modified by the build for the current context, i.e local or production(tar, install)


Following a make a release/<appname>_rel directory will contain two
directories; local and <appname>_rel (again). The local directory is
for running a release outside of production and should be used for
development.  When a release is started via the start-up script,
local/<appname>_rel.sh it is run attached to an Erlang shell and
logging is sent to the terminal as well as to the standard log
files. The following directories and files can be found in the local
directory:

  - **var/**: Configuration like, yaws.conf, is placed under var.
  - **log/**: contains error and sasl log files. By default these are rotated by fs_elwrap_h via G.A.S.
  - **<appname>_rel.sh**: Starts the release in local mode.
  - **<appname>_rel.config**: Configuration for the release.


The <appname>_rel directory is used as a staging area for a production
release. When the make "install" or "tar" targets are run this
directory is used to package and create the production release of tar
file.


# More on the Anatomy of an Application

Applications under OTP Base follow a few conventions. They have a src
and an include directory and they have a vsn.mk file.  The vsn.mk file
contains the version string for the application.  The erlang source
files, under src, should follow the OTP Base naming conventions.  If
the name of the application is my_app then there should exist an
erlang file with behaviour(application) of the name my_app.erl.  All
other files should have the prefix "ma".  For example the application
file is responsible for starting the main supervisor which will be in
the file ma_sup.erl.  If we have a server process it might have a name
like ma_server.erl.  This is why the _tools/utilities/appgen_ OTP Base
application generation script asks for the arguments "appname" and
"prefix".



Under the src directory you can also find the <appname>.app.src file
and the <appname>.appup.src file.  The .app.src file is the file that
will be used by make to generate the .app file that must be present in
the ebin directory for the OTP application structure to properly load
your application. The appup.src file is used by make to generate the
.appup file.  This file is used for run time code upgrades.  To find
out more about this see the documentation at www.erlang.org.

The include directory will contain a single file that is referenced by
all the src files that appgen creates for you.  This file is named
<appname>.hrl.  It is here that you place shared record and macro
definitions.



Following a make the ebin directory will be created and will contain the .app, .appup and .beam files. Following a make docs a doc directory will appear and will contain html documentation of your application. To see how to document your Erlang source code read up on [edoc]("http://www.erlang.org/doc/doc-5.5.5/lib/edoc-0.6.9/doc/html/index.html").


# Creating a New Application

A new application can be created by using the appgen utility in
otp/tools/utilities. This utility will create a basic OTP app
framework under the otp/lib directory and an OTP release under the
otp/release directory. By default these applications include the
Further Standard Lib(FSLib) and G.A.S applications to provide basic
services like logging and log rotation out of the box (If this is not
desired simply delete both apps from the .rel.src file or, post make,
the .rel file and they will be gone.)

    usage: appgen <appname> <prefix>

Appname is the name of the application that you would like to create.
The prefix is usually the first letter of each word in the appname.
This prefix is to avoid name clashes between applications included in
a release (Erlang does not support packages out of the box).

    example usage: appgen my_app ma

which results in:

    otp/lib/my_app & otp/release/my_app_rel


# Running a Release

Your release should contain all that you need to run your application.
If your application depends on any applications that are supplied
outside of this build tree or OTP itself then they may be added to the
<appname>_rel.rel.src file.  If the extra applications are present in
this build tree then they will be found by the make process and
included in the final release.


To run a release there are two options: "local" and installed. The
local version can be found in the otp/release/<appname>_rel/local
directory which is added by the make process.  This should be used
during development to run your release interactively via an Erlang
shell. To run a release in local mode cd into the "local" directory
and run <appname>_rel.sh.


The second way to run a release is to install it and run it as a
daemon.  This is used for applications in a production setting.  To do
this you need to first run make & make install from the <appname>_rel
directory.  This will place a complete production ready versioned
release in the /usr/local/lib/ directory under <appname>_rel.  To run
an installed release cd to
/usr/local/lib/<appname>_rel/release/<rel_vsn> and run
<appname>_rel.sh.


In the case where you want to create a production ready release on one
machine and then deploy it on multiple identical machines you may
create a production tar archive.  To do this run make & make tar from
the otp/release/<appname>_rel/ directory. This will create a tar file
containing the release name and version number in the file name.  This
tar can be shipped to its destination and untarred.  Within the
untarred directory there is a shell script entitled install.sh.
Running this script will install the release by default in
/usr/local/lib/<appname>_rel.  An optional argument can be provided
that will direct the installation to a different directory.


    install.sh /opt/lib

 which will install the release in /opt/lib/<appname>_rel

