---
title: Publishing a Package
directoryName: Faxien
inMenu: true
---

# Publishing a package with Faxien

Faxien provides the ability to publish packages, applications and
releases, to remote repositories for others in your organization or
across the world to use.  To see which repositories Faxien is set to
publish to run

    faxien show_publish_repos

These locations can be changed with

    faxien add_publish_repo <repo>
    faxien remove_publish_repo <repo>

Once in a repository the release or application is ready for immediate
access by other users of Faxien set to download from that repository
(the main Erlware repo, repo.erlware.org/pub, sanity checks apps first
so it is not quite immediate for that particular repo).

Preparing a package for inclusion into a repository is pretty straight
forward.  The standard for packages are really just OTP compliance
though is one optional extension.

# Preparing & publishing an application package

All applications to be published to an Erlware repository must be
pre-compiled. An application typically contains the following
directories, src, ebin, priv, and include.  An application containing
these directories is said to be a generic application.  Basically it
contains only platform independent code and so it is generic with
respect to architecture.

If an application contains a c_src directory or some other non
platform independent object code it is considered architecture
specific.  It must be pre-compiled on the machine that it is being
published from.  Faxien will determine the architecture of the box it
is running on and then publish the application into a repository
location specific to that local architecture.

All application packages must contain an ebin directory with
pre-compiled beam files and a .app file. Here is what an .app file
should contain (this is the .app file for a version of Faxien itself)


    {application, faxien,
     [{description, "Pulls down applications from Erlware repo's"},
      {vsn, "0.18.0"},
       {modules, [
        faxien,
        fax_publish,
        fax_install,
        fax_local_install,
        fax_manage,
        fax_validation,
        fax_util]},
      {registered, []},
      {versioned_dependencies, [{ibrowse, "1.2.4.1", gte}]},
      {applications, [eunit, kernel, stdlib, xmerl, ibrowse, ewrepo, ewlib, gas]}]}.


Note the "applications" tuple.  This should contain a list of all the
applications that the application depends on. If there is a
requirement for a specific version of an application that should be
placed in the "versioned_dependencies" tuple.  Besides having a src,
ebin, and .app file there is really nothing more needed to publish an
application.

# Preparing & publishing a release package

A release is a collection of applications, configuration, and
optionally some template information to tell Faxien how to start the
release.  Basically it is a self contained Erlang service or services
that run on a single node.  The ability to publish and install
releases is probably the most important function of Faxien.

A release contains at minimum a releases/<release_vsn> directory
containing a .rel file.  A .rel file contains a specification of the
applications that are part of a release.  Here is the .rel file for
the a Faxien release. Which for this example is contained in
faxien-0.10.0/releases/0.10.0


    {release,{"faxien","0.10.0"},
             {erts,"5.5.4"},
             [{stdlib,"1.14.4"},
              {kernel,"2.11.4"},
              {xmerl,"1.1.2"},
              {sasl,"2.1.5"},
              {ibrowse,"1.2.5"},
              {ewrepo,"0.8.3"},
              {eunit,"2.0"},
              {ewlib,"0.3.0"},
              {gas,"4.8.0"},
              {faxien,"0.10.0"}]}.

Releases published to a repository do not contain a lib directory
which contains these applications you see in the release (.rel) file
above.  Instead when a release is installed from a repository faxien
reads this release file and downloads the applications specified
within into the erlware/lib directory. The
<release>releases/<release_vsn> directory can also contain a .config
file. The .config file contains erlang terms used to configure a
release.

A release to be published can also contain any number of other
directories, really anything but a "lib" directory. "lib" is a special
directory reserved only for releases to be installed locally.  "cmds"
is another special directory it contains template information to show
faxien how to start a particular release.  Faxien will generate a
startup script on install that sits in; //erlware/bin//. For an
example of a cmds template file see the
[Full Cycle Tutorial]({relocatable: /tutorials/full-development-cycle.page})

That is really it, a .rel file placed in the
<release_name>-<release_version>/releases/<release_version> directory
and template code placed in the <release_name>-<release_version>/cmds
directory.  Faxien will do the rest.  When faxien performs an install
on a release the .script and .boot files will be generated, startup
scripts will be generated, and all the required applications will be
installed as well, among other things. Once published other users will
be able to install and start the release simply by running a Faxien
installation command like "faxien install <release_name>".

A sample release can be found [here](http://www.martinjlogan.com:8080/full_cycle/full_cycle.tar.gz)
