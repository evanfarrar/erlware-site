---
title: index
directoryName: Sinan
---
![Sinan]({relocatable:/images/icon-sinan3-with-text.jpg})

# Overview

Sinan is our flagship build system. It is a build system designed
expressly for Erlang OTP projects. It simply will not work on projects
that are not based on the OTP principles. Fortunately, this shouldn't
be too much of a problem because you shouldn't really be writing
significant Erlang applications without using OTP.

By choosing to build only OTP projects we are able to make use of all
that wonderful OTP metadata. This allows us, in the vast majority of
cases, to simply 'Do the Right Thing' while building a project. This
approach allows us to build a project with little or no input from the
user. It also allows us to do a lot of the grunt work of OTP
automatically.

# More Information

  * [Layout For Sinan Projects]({relocatable: project-layout.page})
  * [Getting Started]({relocatable: getting-started.page})
  * [The Build Config]({relocatable: build-config.page})
  * [Tasks]({relocatable: tasks.page})

# Overview

As of this writing Sinan will do the following things for you.
  * Manage dependencies
  * Retrieve packages to meet dependencies
  * Run Unit Tests and provide code coverage metrics
  * Warn about OTP layout and metadata issues
  * Compile Erlang files
  * Generate *.rel files
  * Generate *.boot, *.script and other files required by the otp release system
  * Run Dialyzer across all of the code in the project
  * Create a tar file that the OTP releases system understands and can use
  * Clean up after itself

# Whats in a Name?

I usually try to pick good googleable project names. This usually
means that I have to pick and arbitrary name and build meaning around
it, since almost all of the proper nouns that would fit a project are
taken or already well represented on the net. Since I had to pick a
name for a build system I decided to use the name of a famous
architect or builder from history. There is no small number of
possible options. Unfortunately, many of them are already used for
various open source projects out there. In my searches for possible
names, I came across [Ḳoca Mi‘mār Sinān
Āġā](http://en.wikipedia.org/wiki/Sinan) a famous builder from the
Ottoman Empire. He worked primarily in Istanbul. Well this caught my
attention. At one time Istanbul was Constantinople and before that
Byzantium and I have a certain fascination with Byzantine history. The
fact that Sinan was a brilliant architect just kind of sealed the
deal. So what I ended up with is a nice googleable name that is
memorable and short enough to type on the command line, also having an
interesting historical meaning.


# Building the Tree

 To build, type sinan, it should all work from there. Additionally the base system supports the following tasks.

## Build Specific

  * **build**: (also the default) the build task actually goes through and attempts to build the application.
  * **test**: will run any eunit tests you have in your project and output the results. It will also output code coverage information for your project. You must use eunit 2.0 alpha or greater if you wish to use this test task.
  * **doc**:  The doc tag runs edoc across all of the OTP applications in your project. (The xmerl shipped with Erlang R11B-3 is a bit broken so edoc does not work for that release of Erlang).
  * **analyze**: runs Dialyzer across all of the code in your application. The output from Dialyzer is written to the command line.
  * **clean**: Deletes any and all files generated by sinan.


## App Specific

  * **tarapp**: Tars up a single application that is part of the project. Mostly of use for uploading to one of the erlware repositories.

## Release Specific

  * **release**: Generates the *.rel, *.boot, and *.script files.
  * **tar**: Uses the system taring tools to create an *.tar file that the standard release handler is able to use.

Any application can be excluded from the build and release process if
the app name is in the list of app names that are attached to the
ignore_apps entry in the build config.



# Application Details

An OTP application must have at least the following directories.


  * **src/**: contains erlang sources (.erl files)
  * **ebin/**: compiled beam files are placed here

An OTP application may also have any one of the following directories.

   * **include/**: contains shared .hrl files
   * **c_src/**: contains C sources
   * **priv/**: contains files you want at run-time

# Anatomy of an Application

Applications under a sinan project must follow a few conventions. They
have a src and an ebin directory and they must have an
ebin/<appname>.app. The erlang source files, under src, should follow
the OTP naming conventions.  If the name of the application is my_app
then there should exist an erlang file with behaviour(application) of
the name my_app.erl. All other files should have a prefix representing
the namespace of the application.

Under the ebin/ directory you must also find the <appname>.app
file. This file is used heavily by the sinan build system as well as
otp. To find out more about this see the documentation at
www.erlang.org.

Following a build the <project-root>/_build directory will be
created. Under the build directory will be several directories used by
the build system. In this case the 'apps' directory will be of
interest. In the <project-root>/_build/apps/<appname-vsn> will be a
distribution read version of the app. The ebin directory will contain
the .app and .beam files. The src directory will contain symlinks to
this source and other required directories will be present.

# Creating a New Project

A new project can be created by using the projgen utility included
with sinan. This utility will create a basic sinan project framework
under in the current directory. This utility will ask several
questions about the potential project and its constituent
applications. It will then output a fully buildable sinan application.

    usage: singen


# Creating a New Application

A new application can be created by using the singen utility included
with sinan. This utility will create a basic OTP app under the
<project-root>/lib directory. By default these applications are
buildable out of the box.

    usage: singen <appname> <prefix>

Appname is the name of the application that you would like to create.
The prefix is usually the first letter of each word in the appname.
This prefix is to avoid name clashes between applications included in
a release (Erlang does not support packages out of the box).

    example usage: singen my_app ma

which results in:

    <project-root>/lib/my_app

