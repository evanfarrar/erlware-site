---
title: Erlware Development Model
directoryName: Development
inMenu: true
orderInfo: 1
---

# Execution Model for Erlware Development

This page contains information on our process.  Basically how we turn
our ideas into reality.

## Communication for Users and Developers

The
[erlware-dev@googlegroups.com][erlware-dev]
mailing list is the primary means of communication. Bugs and
enhancements from users should be placed on the appropriate issues
list at code.google.com/p/<project>.  Developers and users both should
subscribe to the issues they are interested in or have created by
using a *.  If a user or developer wants to monitor all issues they
should subscribe to
[erlware-artifacts@googlegroups.com][erlware-artifacts].
To spur discussion on a particular issue, send an email to
[erlware-dev][erlware-dev] or
[erlware-questions][erlware-questions]
with a link to the issue, and ask that further discussion take place
on the issue itself; preferably not over email.

Erlware developers are often online in the #erlware IRC channel, on
irc.freenode.net. Feel free to drop by and ask questions, suggest enhancements,
etc. We log public conversations for the record, so that you can browse [old
conversations][irc_archive] or find them when searching the web.

## Git and the Patch Process

First make sure to install msmtp (on debian or ubuntu just type sudo
apt-get install msmtp) Place the following in a config file with the
name .msmtprc in your home directory:

    account gmail
    host smtp.gmail.com
    auth on
    user <your username here>@gmail.com
    password <your password here>
    tls on
    tls_starttls on
    tls_certcheck off
    from <your username here>@gmail.com
    maildomain gmail.com
    account default : gmail

Now configure git to use msmtp.  You must do this for each separate
repository/project

    $ git config sendemail.smtpserver <path_to_msmtp>

For each project you will be submitting patches for you need to
configure a subject line.

    $ git config format.subjectprefix "<repo_name> PATCH"


### Providing access to your public git repository

Although all patches which are accepted into canonical sources must be
sent to the list, it can be useful to publish your intermediate work
on your own public repository. See the [git][public-git] documentation
on how to set up a public repo that other people can pull from. See
the other developers' [public repos][dev-repos] for examples.


### Publishing a work branch

Let's say you have a branch called 'work' that you want to make
available for others to pull from. If you are in your working
repository, you can do this:

    git checkout work
    git push <url-for-my-public-repo> work

Your public repository URL for this operation will probably be
something like:

    username@my.public.server.com:path/to/my/public/repo

Note the URL that others use to pull your repository will be different,
probably something starting with 'http://' or 'git://'.


### Pulling from another developer's public branch

Let's say another developer has published some work you
would like to merge into your own tree. Add the developer's
public repo to your working repo as a remote:

    git remote add krondo http://git.krondo.com/erlware/faxien.git

Above we are adding the faxien repo at git.krondo.com as a remotely
tracked branch to our repo. We have named it 'krondo', but we could
name it whatever we want to. Now we can use the name to fetch the
latest work from that repo:

    git fetch krondo

Now the patches from that repository are in our tree, but none
of our local branches or working directory has been changed.
We can merge the changes on a branch of the remote repository
into our current branch with git merge:

    git merge krondo/next

That command merges the 'next' branch from the remote repository
into our current branch.


[erlware-artifacts]: http://groups.google.com/group/erlware-artifacts?hl=en
[erlware-dev]: http://groups.google.com/group/erlware-dev?hl=en
[erlware-questions]: http://groups.google.com/group/erlware-questions?hl=en
[public-git]: http://www.kernel.org/pub/software/scm/git/docs/user-manual.html#setting-up-a-public-repository
[dev-repos]: public_repositories.html
[irc_archive]: http://erlware.org/irclogs (IRC archive)
